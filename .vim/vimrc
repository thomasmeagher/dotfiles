set nocompatible
filetype off

call plug#begin('~/.vim/plugged')

" Basic
Plug 'sjl/vitality.vim'
Plug 'tpope/vim-sensible'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-repeat'

" Editor
Plug 'miyakogi/conoline.vim'
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}

" Navigation / Search
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'

" Language
Plug 'sheerun/vim-polyglot'
Plug 'dag/vim-fish'

" Appearance / Themes
Plug 'itchyny/landscape.vim'
Plug 'itchyny/lightline.vim'

call plug#end()

" Leader
let mapleader=" "  " Map <Leader> to space

" Rapid editing for vimrc
nmap <Leader>rc :vsp $MYVIMRC<CR>
nmap <Leader>so :source $MYVIMRC<CR>

" File Navigation / Search
nmap <Leader>p :Files<CR>
nmap <Leader>f :Rg<CR>

" Quick save
nmap <C-s> :w<CR>
vmap <C-s> <Esc><C-s>gv
imap <C-s> <Esc><C-s>

" Easy access to the start of the line
nmap 0 ^

" Move up and down by visible lines if current line is wrapped
nmap k gk
nmap j gj

" Use tab for trigger completion with characters ahead and navigate.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Interface
color landscape
let g:lightline = { 'colorscheme': 'landscape' }

set number         " Show line numbers
set relativenumber " Line numbers relative to cursor
set showmode       " Show the mode in use
set cursorline     " Highlight current line
set wrap           " Turn on line wrapping
set colorcolumn=80 " Show a column at 80
set title          " Set the terminal title
set visualbell     " Disable beeping
set showcmd        " Show the (partial) command as it's being typed
set scrolloff=2    " Always show at least two lines above/below the cursor
set shortmess=Ia   " Disable start up message and abbreviate items
set updatetime=300

" Status Bar
set laststatus=2 " Always show status bar
" Highlight the status bar when in insert mode
au InsertEnter * hi StatusLine ctermfg=235 ctermbg=10
au InsertLeave * hi StatusLine ctermfg=15 ctermbg=240

" Search
set hlsearch   " Highlight all search matches
set incsearch  " Highlight matches as you type
set ignorecase
set smartcase  " Be case-sensitive if expression contains a capital letter

" Backup
set nobackup
set nowritebackup
set directory=$HOME/.vim/tmp//,. " Keep swap files in one place

" Formatting
set tabstop=4    " Use 4 spaces to a tab
set shiftwidth=4 " As above
set expandtab    " Expand tabs into spaces
set showbreak=â†ª

" Disable arrow keys
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
no <up> <Nop>

" Copy copy register to OS X general pasteboard
function! PBCopy()
  call system("pbcopy", getreg(""))
endfunction

" Paste from OS X general pasteboard to copy register
function! PBPaste()
  call setreg("", system("pbpaste"))
endfunction

" By the power of https://github.com/sjl/vitality.vim, copies and pastes
" to the OS X pasteboard when switching between vim and other windows
" (even in tmux)
autocmd FocusLost * :call PBCopy()
autocmd FocusGained * :call PBPaste()

" Teach a Vim to fish...
" https://github.com/dag/vim-fish#teach-a-vim-to-fish
if &shell =~# 'fish$'
  set shell=bash
endif

