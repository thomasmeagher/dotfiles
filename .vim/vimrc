" Plug {{{
call plug#begin('~/.vim/plugged')

" General
Plug 'tpope/vim-sensible'
Plug 'vimwiki/vimwiki', { 'branch': 'dev' }

" Appearance
Plug 'itchyny/lightline.vim'
Plug 'nanotech/jellybeans.vim'
Plug 'nathanaelkane/vim-indent-guides'

" Editor
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'airblade/vim-rooter'
Plug 'brooth/far.vim', { 'on': ['Far', 'Farr'] }
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', { 'branch': 'release' }
Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']  }

" Commands
Plug 'Asheq/close-buffers.vim', { 'on': ['Bdelete'] }
Plug 'godlygeek/tabular', { 'on': ['Tabularize', 'Tabu'] }
Plug 'justinmk/vim-sneak'
Plug 'mattn/emmet-vim'
Plug 'tomtom/tcomment_vim'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'vim-scripts/YankRing.vim', { 'on': ['YRShow'] }

" Git
Plug 'mhinz/vim-signify'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'

" Tmux
Plug 'sjl/vitality.vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'christoomey/vim-tmux-runner'

" Language
Plug 'sheerun/vim-polyglot'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'

Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
Plug 'hashivim/vim-terraform', { 'for': 'terraform' }

" Snippets
Plug 'epilande/vim-es2015-snippets'
Plug 'epilande/vim-react-snippets'
call plug#end()
" }}}
" General {{{
set nocompatible
filetype plugin indent on
syntax enable

set clipboard=unnamed " Use system clipboard
set colorcolumn=80    " Show a column at 80
set cursorline        " Highlight current line
set hidden            " Handle multiple buffers better
set laststatus=2      " Always show status bar
set noshowmode        " Hide redundant mode
set shortmess=Iac     " Disable start up message and abbreviate items
set showcmd           " Show the (partial) command as it's being typed
set signcolumn=yes    " Always show the signcolumn
set title             " Set the terminal title
set updatetime=300
set visualbell        " Disable beeping
set wrap              " Turn on line wrapping

" Syntax folding powered by sheerun/vim-polyglot
set foldmethod=syntax
set foldlevelstart=99

" Line numbers
set number            " Show line numbers
set relativenumber    " Line numbers relative to cursor
set scrolloff=2       " Always show at least two lines above/below the cursor

" More natural split opening
set splitbelow
set splitright

" Search
set hlsearch   " Highlight all search matches
set ignorecase
set incsearch  " Highlight matches as you type
set smartcase  " Be case-sensitive if expression contains a capital letter

" Completion
set wildmenu                   " Better command line completion
set wildmode=longest:full,full " Completion settings

" Backup
set nobackup
set nowritebackup
set noswapfile 

" Formatting
set tabstop=4    " Use 4 spaces to a tab
set shiftwidth=4 " As above
set expandtab    " Expand tabs into spaces
set showbreak=↪
set list listchars=tab:▸\ ,trail:·

" Spelling
set spellfile=~/.vim/spell/en.utf-8.add
set spelllang=en_us
set complete+=kspell " Autocomplete when spell check is on
" }}}
" Appearance {{{
colorscheme jellybeans
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['gitbranch', 'readonly', 'filename', 'modified']],
      \   'right': [
      \     ['lineinfo'],
      \     ['percent'],
      \     ['filetype']],
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
hi IndentGuidesOdd  ctermbg=234
hi IndentGuidesEven ctermbg=235
" }}}
" Key Mappings {{{
" H to move to the first character in a line
nmap H ^
" L to move to the last character in a line
nmap L g_

" Move down file lines
nmap J 5j
vmap J 5j
" Move up file lines
nmap K 5k
vmap K 5k

" Move up and down by visible lines if current line is wrapped
nmap k gk
nmap j gj

" Yank to end of current line
nmap Y y$

" Disable arrow keys
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
no <up> <Nop>
" }}}
" Leader Commands {{{
let mapleader=" "  " Map <Leader> to space

" Rapid Editing Vimrc
nmap <Leader>rc :vsp $MYVIMRC<CR>
nmap <Leader>so :source $MYVIMRC<CR>

" Quick Save
nmap <Leader>w :silent w<CR>

" Quick Quit
nmap <Leader>q :q<CR>

" vimwiki
nmap <Leader>n <Plug>VimwikiMakeDiaryNote
nmap <Leader>wp :Files ~/.vim/vimwiki<CR>
nmap <Leader>wg :RgVimwiki<CR>

" FZF
nmap <Leader>p :Files<CR>
nmap <Leader>rg :Rg<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>l :BLines<CR>
nmap <Leader>c :Commands<CR>
nmap <Leader>h :History<CR>
nmap <Leader>: :History:<CR>
nmap <Leader>H :Helptags<CR>
nmap <Leader>F :Filetypes<CR>

" NERDTree
nmap <Leader>e :NERDTreeToggle<CR>
nmap <Leader>f :NERDTreeFind<CR>

" Coc
nmap <Leader>rn <Plug>(coc-rename)
nmap <Leader>ac <Plug>(coc-codeaction)
nmap <Leader>af <Plug>(coc-fix-current)

" YankRing
nmap <Leader>y :YRShow<CR>

" close-buffers.vim
nmap <Leader>d :Bdelete menu<CR>
" }}}
" Plugins {{{
" vimwiki/vimwiki
let g:vimwiki_list = [{
            \ 'path': '~/.vim/vimwiki/',
            \ 'syntax': 'markdown', 'ext': '.md',
            \ }]
let g:vimwiki_table_mappings = 0

" junegunn/fzf.vim
let g:fzf_preview_window = 'right:50%'

" preservim/nerdtree
let g:NERDTreeMinimalUI = 1
let g:NERDTreeMinimalMenu = 1
let g:NERDTreeShowHidden = 1
let g:NERDTreeShowLineNumbers = 0
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

" brooth/far.vim
let g:far#source = 'rg'
let g:far#enable_undo = 1

" justinmk/vim-sneak
let g:sneak#label = 1

" christoomey/vim-tmux-navigator
let g:tmux_navigator_disable_when_zoomed = 1
let g:tmux_navigator_save_on_switch = 2

" hashivim/vim-terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" plasticboy/vim-markdown
let g:vim_markdown_frontmatter = 1
let g:vim_markdown_folding_style_pythonic = 1

" Teach a Vim to fish
" https://github.com/georgewitteman/vim-fish#teach-a-vim-to-fish
if &shell =~# 'fish$'
    set shell=bash
endif
" }}}
" Coc {{{
let g:coc_global_extensions = [
    \ 'coc-css',
    \ 'coc-eslint',
    \ 'coc-json',
    \ 'coc-snippets',
    \ 'coc-tailwindcss',
    \ 'coc-tsserver',
    \ 'coc-vetur',
    \ ]

" Use tab for trigger completion with characters ahead and navigate
imap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use \ to show documentation in preview window.
nmap <silent> \ :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor
hi default CocHighlightText ctermbg=236
autocmd CursorHold * silent call CocActionAsync('highlight')

" Introduce function text object
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap if <Plug>(coc-funcobj-i)
omap af <Plug>(coc-funcobj-a)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocAction('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call CocAction('fold', <f-args>)

" Snippets
" Use <C-l> for trigger snippet expand.
imap <C-l> <Plug>(coc-snippets-expand)

" Use <C-j> for select text for visual placeholder of snippet.
vmap <C-j> <Plug>(coc-snippets-select)

" Use <C-j> for jump to next placeholder, it's default of coc.nvim
let g:coc_snippet_next = '<C-j>'

" Use <C-k> for jump to previous placeholder, it's default of coc.nvim
let g:coc_snippet_prev = '<C-k>'

" Use <C-j> for both expand and jump (make expand higher priority.)
imap <C-j> <Plug>(coc-snippets-expand-jump)
" }}}
" Autocommands {{{
" Hybrid line numbers
" Switch between relative and absolute line numbers based on mode
" https://jeffkreeftmeijer.com/vim-number/
augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * call SetRelativeNumber()
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

" By the power of https://github.com/sjl/vitality.vim, copies and pastes
" to the OS X pasteboard when switching between vim and other windows
" (even in tmux)
autocmd FocusLost * :call PBCopy()
autocmd FocusGained * :call PBPaste()

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Turn on spell check, etc. for markdown files
autocmd BufRead,BufNewFile *.md set filetype=markdown
autocmd FileType markdown setlocal spell signcolumn=no textwidth=80 colorcolumn=+1

" Spell-check Git messages
autocmd FileType gitcommit setlocal spell

" Open all folds for certain file types
augroup openfolds
    autocmd!
    autocmd FileType vim,tmux normal zM
augroup END

" automatically update links on read diary
augroup vimwikigroup
    autocmd!
    autocmd BufRead,BufNewFile diary.md VimwikiDiaryGenerateLinks
augroup end
" }}}
" Commands {{{
command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0, '.')
command! -nargs=* -bang RgVimwiki call RipgrepFzf(<q-args>, <bang>0, '~/.vim/vimwiki')

" fzf Files with preview
" https://github.com/junegunn/fzf.vim#example-customizing-files-command
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse']}), <bang>0)
" }}}
" Functions {{{
" Advanced ripgrep fzf integration
" https://github.com/junegunn/fzf.vim#example-advanced-ripgrep-integration
function! RipgrepFzf(query, fullscreen, dir)
    let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
    let initial_command = printf(command_fmt, shellescape(a:query))
    let reload_command = printf(command_fmt, '{q}')
    let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command, '--layout=reverse'], 'dir': a:dir}
    call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

" Set relativenumber only for certain files
function! SetRelativeNumber()
    if &filetype != 'nerdtree'
        set relativenumber
    endif
endfunction

" Copy register to OS X general pasteboard
function! PBCopy()
  call system('pbcopy', getreg(''))
endfunction

" Paste from OS X general pasteboard to copy register
function! PBPaste()
  call setreg('', system('pbpaste'))
endfunction
" }}}
" vim:foldmethod=marker
