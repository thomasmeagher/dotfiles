set nocompatible
syntax enable
filetype off
filetype plugin indent on

" Plugins {{{
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'

" Editor
Plug 'neoclide/coc.nvim', {'tag': '*', 'branch': 'release'}
Plug 'mattn/emmet-vim'
Plug 'airblade/vim-rooter'
Plug 'jiangmiao/auto-pairs'
Plug 'preservim/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind']  }

" Commands
Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-repeat' | Plug 'kreskij/Repeatable.vim', { 'on': 'Repeatable' }
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-abolish'
Plug 'tpope/vim-obsession'
Plug 'godlygeek/tabular'
Plug 'justinmk/vim-sneak'

" Appearance
Plug 'nanotech/jellybeans.vim'
Plug 'itchyny/lightline.vim'
Plug 'nathanaelkane/vim-indent-guides'

" Language
Plug 'sheerun/vim-polyglot'
Plug 'dag/vim-fish'

" Git
Plug 'tpope/vim-fugitive'
Plug 'mhinz/vim-signify'
Plug 'rhysd/git-messenger.vim'

" Tmux
Plug 'sjl/vitality.vim'
Plug 'christoomey/vim-tmux-navigator'

" Terraform
Plug 'prabirshrestha/async.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'hashivim/vim-terraform'

call plug#end()
" }}}

" Commands {{{
" Leader
let mapleader=" "  " Map <Leader> to space

" Rapid Editing Vimrc
nmap <Leader>rc :vsp $MYVIMRC<CR>
nmap <Leader>so :source $MYVIMRC<CR>

" Quick Save
nmap <Leader>w :w<cr>

" Quick Quit
nmap <Leader>q :q<CR>

" FZF
nmap <Leader>p :Files<CR>
nmap <Leader>rg :Rg<CR>
nmap <Leader>h :History<CR>
nmap <Leader>c :Commands<CR>
nmap <Leader>b :Buffers<CR>
nmap <Leader>t :BTags<CR>

" NERDTree
nmap <Leader>e :NERDTreeToggle<CR>
nmap <Leader>f :NERDTreeFind<CR>

" Easier Split Navigations
nmap <C-j> <C-w><C-j>
nmap <C-k> <C-w><C-k>
nmap <C-l> <C-w><C-l>
nmap <C-h> <C-w><C-h>

" H to move to the first character in a line
nmap H ^
" L to move to the last character in a line
nmap L g_

" Move down file lines
nmap J 5j
vmap J 5j
" Move up file lines
nmap K 5k
vmap K 5k

" Move up and down by visible lines if current line is wrapped
nmap k gk
nmap j gj

" Yank to end of current line
nmap Y y$

" Use tab for trigger completion with characters ahead and navigate
imap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
imap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use `[g` and `]g` to navigate diagnostics
Repeatable nmap <silent> [g <Plug>(coc-diagnostic-prev)
Repeatable nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Quick fix
nmap <silent> gy <Plug>(coc-fix-current)

" Format buffer
nmap <silent> gp <Plug>(coc-format)

" Use K to show documentation in preview window.
nmap <silent> gx :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Symbol renaming
nmap <Leader>rn <Plug>(coc-rename)

" Quickly move current line
Repeatable nmap [e :<c-u>execute 'move -1-'. v:count1<cr>
Repeatable nmap ]e :<c-u>execute 'move +'. v:count1<cr>

" Quickly add empty lines
Repeatable nmap [<space> :<c-u>put! =repeat(nr2char(10), v:count1)<cr>'[
Repeatable nmap ]<space> :<c-u>put =repeat(nr2char(10), v:count1)<cr>

" Disable arrow keys
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>
no <up> <Nop>
" }}}

" Interface {{{
color jellybeans
let g:lightline = {
      \ 'colorscheme': 'jellybeans',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ],
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'filetype' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }
let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=234
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=235

let g:NERDTreeMinimalUI = 1
let g:NERDTreeMinimalMenu = 1
let g:NERDTreeDirArrowExpandable = ''
let g:NERDTreeDirArrowCollapsible = ''

set updatetime=300
set signcolumn=yes    " Always show the signcolumn
set number            " Show line numbers
set relativenumber    " Line numbers relative to cursor
set showmode          " Show the mode in use
set cursorline        " Highlight current line
set wrap              " Turn on line wrapping
set colorcolumn=80    " Show a column at 80
set title             " Set the terminal title
set visualbell        " Disable beeping
set showcmd           " Show the (partial) command as it's being typed
set scrolloff=2       " Always show at least two lines above/below the cursor
set shortmess=Ia      " Disable start up message and abbreviate items
set clipboard=unnamed " y and p use system clipboard
set noshowmode        " Hide redundant mode
set laststatus=2      " Always show status bar
set spelllang=en_us

" More natural split opening
set splitbelow
set splitright

" Highlight the symbol and its references when holding the cursor.
hi default CocHighlightText ctermbg=236
autocmd CursorHold * silent call CocActionAsync('highlight')

" Line behavior
:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

" Search
set hlsearch   " Highlight all search matches
set incsearch  " Highlight matches as you type
set ignorecase
set smartcase  " Be case-sensitive if expression contains a capital letter

" Completion
set wildmenu                   " Better completion in the CLI
set wildmode=longest:full,full " Completion settings

" Backup
set nobackup
set nowritebackup
set noswapfile 

" Formatting
set tabstop=4    " Use 4 spaces to a tab
set shiftwidth=4 " As above
set expandtab    " Expand tabs into spaces
set showbreak=↪
set list listchars=tab:▸\ ,trail:·
" }}}

" Random {{{
" fzf Files with preview
" https://github.com/junegunn/fzf.vim#example-customizing-files-command
command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--layout=reverse']}), <bang>0)

" Advanced ripgrep fzf integration
" https://github.com/junegunn/fzf.vim#example-advanced-ripgrep-integration
function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command, '--layout=reverse']}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

" vim-terraform
let g:terraform_align=1
let g:terraform_fmt_on_save=1

" Copy register to OS X general pasteboard
function! PBCopy()
  call system("pbcopy", getreg(""))
endfunction

" Paste from OS X general pasteboard to copy register
function! PBPaste()
  call setreg("", system("pbpaste"))
endfunction

" By the power of https://github.com/sjl/vitality.vim, copies and pastes
" to the OS X pasteboard when switching between vim and other windows
" (even in tmux)
autocmd FocusLost * :call PBCopy()
autocmd FocusGained * :call PBPaste()

" Automatically rebalance windows on vim resize
autocmd VimResized * :wincmd =

" Teach a Vim to fish...
" https://github.com/dag/vim-fish#teach-a-vim-to-fish
if &shell =~# 'fish$'
  set shell=bash
endif
" }}}

